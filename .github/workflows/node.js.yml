name: CI/CD Pipeline

on:
  push:
    branches:
      - main.js

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm audit fix
      - run: npm run build --if-present
      - run: npm test

  # Commenting out deploy step until AWS keys are available
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build, tag, and push image to Amazon ECR
  #       env:
  #         ECR_REPOSITORY: my-ecr-repo
  #         IMAGE_TAG: latest
  #       run: |
  #         docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
  #         docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
  #         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ecs-task-def.json
  #         container-name: my-container
  #         image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-ecr-repo:latest

  #     - name: Deploy Amazon ECS task definition
  #       id: deploy-ecs
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: my-ecs-service
  #         cluster: my-ecs-cluster
  #         wait-for-service-stability: true
